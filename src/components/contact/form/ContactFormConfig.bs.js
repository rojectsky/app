// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";

function update(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: value,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

function validator_validate(param) {
  return /* Ok */Block.__(0, [/* Valid */0]);
}

var validator = {
  field: /* Title */0,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate
};

var TitleField_inputContainer = {
  containerType: /* Select */4,
  type_: "text",
  label: "Title",
  inputId: "Title",
  placeholder: "title"
};

var TitleField = {
  update: update,
  validator: validator,
  inputContainer: TitleField_inputContainer
};

function update$1(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: value,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

function validator_validate$1(param) {
  if (param.contact.firstName === "") {
    return /* Error */Block.__(1, ["FirstName is required"]);
  } else {
    return /* Ok */Block.__(0, [/* Valid */0]);
  }
}

var validator$1 = {
  field: /* FirstName */1,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$1
};

var FirstNameField_inputContainer = {
  containerType: /* Text */0,
  type_: "text",
  label: "First Name",
  inputId: "FirstName",
  placeholder: "John"
};

var FirstNameField = {
  update: update$1,
  validator: validator$1,
  inputContainer: FirstNameField_inputContainer
};

function update$2(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: value,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

function validator_validate$2(param) {
  if (param.contact.lastName === "") {
    return /* Error */Block.__(1, ["LastName is required"]);
  } else {
    return /* Ok */Block.__(0, [/* Valid */0]);
  }
}

var validator$2 = {
  field: /* LastName */2,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$2
};

var LastNameField_inputContainer = {
  containerType: /* Text */0,
  type_: "text",
  label: "Last Name",
  inputId: "LastName",
  placeholder: "Smith"
};

var LastNameField = {
  update: update$2,
  validator: validator$2,
  inputContainer: LastNameField_inputContainer
};

function update$3(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: value,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

function validator_validate$3(param) {
  if (param.contact.account === "") {
    return /* Error */Block.__(1, ["Account name is required"]);
  } else {
    return /* Ok */Block.__(0, [/* Valid */0]);
  }
}

var validator$3 = {
  field: /* Account */3,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$3
};

var AccountField_inputContainer = {
  containerType: /* Text */0,
  type_: "text",
  label: "Account Name",
  inputId: "Account",
  placeholder: "John's joinery"
};

var AccountField = {
  update: update$3,
  validator: validator$3,
  inputContainer: AccountField_inputContainer
};

function update$4(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: value,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

function validator_validate$4(param) {
  return /* Ok */Block.__(0, [/* Valid */0]);
}

var validator$4 = {
  field: /* Company */4,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$4
};

var CompanyField_inputContainer = {
  containerType: /* Text */0,
  type_: "text",
  label: "Company Name",
  inputId: "Company",
  placeholder: "John's Company"
};

var CompanyField = {
  update: update$4,
  validator: validator$4,
  inputContainer: CompanyField_inputContainer
};

function update$5(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: value,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

var regx = (/^(?=.*\d)[\d ]+$/);

function validator_validate$5(param) {
  var phone = param.contact.phone;
  if (phone === "") {
    return /* Error */Block.__(1, ["Phone is required"]);
  } else {
    var match = regx.test(phone);
    if (match) {
      return /* Ok */Block.__(0, [/* Valid */0]);
    } else {
      return /* Error */Block.__(1, ["Invalid Phone, please put numbers only"]);
    }
  }
}

var validator$5 = {
  field: /* Phone */5,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$5
};

var PhoneField_inputContainer = {
  containerType: /* Text */0,
  type_: "text",
  label: "Phone",
  inputId: "Phone",
  placeholder: "02 9999 9999"
};

var PhoneField = {
  update: update$5,
  regx: regx,
  validator: validator$5,
  inputContainer: PhoneField_inputContainer
};

function update$6(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: value,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

function validator_validate$6(param) {
  return /* Ok */Block.__(0, [/* Valid */0]);
}

var validator$6 = {
  field: /* Fax */6,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$6
};

var FaxField_inputContainer = {
  containerType: /* Text */0,
  type_: "text",
  label: "Fax  ",
  inputId: "Fax",
  placeholder: "John's Fax"
};

var FaxField = {
  update: update$6,
  validator: validator$6,
  inputContainer: FaxField_inputContainer
};

function update$7(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: value,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

function validator_validate$7(param) {
  return /* Ok */Block.__(0, [/* Valid */0]);
}

var validator$7 = {
  field: /* CompanyTitle */7,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$7
};

var CompanyTitleField_inputContainer = {
  containerType: /* Text */0,
  type_: "text",
  label: "Title",
  inputId: "CompanyTitle",
  placeholder: "Owner"
};

var CompanyTitleField = {
  update: update$7,
  validator: validator$7,
  inputContainer: CompanyTitleField_inputContainer
};

function update$8(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: value,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

var regx$1 = (/^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/);

function validator_validate$8(param) {
  var email = param.contact.email;
  if (email === "") {
    return /* Error */Block.__(1, ["Email is required"]);
  } else {
    var match = regx$1.test(email);
    if (match) {
      return /* Ok */Block.__(0, [/* Valid */0]);
    } else {
      return /* Error */Block.__(1, ["Invalid Email"]);
    }
  }
}

var validator$8 = {
  field: /* Email */8,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$8
};

var EmailField_inputContainer = {
  containerType: /* Text */0,
  type_: "email",
  label: "Email ",
  inputId: "Email",
  placeholder: "John's Email"
};

var EmailField = {
  update: update$8,
  regx: regx$1,
  validator: validator$8,
  inputContainer: EmailField_inputContainer
};

function update$9(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: value,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

function validator_validate$9(param) {
  return /* Ok */Block.__(0, [/* Valid */0]);
}

var validator$9 = {
  field: /* EmailOp */9,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$9
};

var EmailOpField_inputContainer = {
  containerType: /* Text */0,
  type_: "checkbox",
  label: "Email Opt Out",
  inputId: "EmailOp",
  placeholder: ""
};

var EmailOpField = {
  update: update$9,
  validator: validator$9,
  inputContainer: EmailOpField_inputContainer
};

function update$10(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: value,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

function validator_validate$10(param) {
  if (param.contact.street === "") {
    return /* Error */Block.__(1, ["Street is required"]);
  } else {
    return /* Ok */Block.__(0, [/* Valid */0]);
  }
}

var validator$10 = {
  field: /* Street */10,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$10
};

var StreetField_inputContainer = {
  containerType: /* Text */0,
  type_: "text",
  label: "Street ",
  inputId: "Street",
  placeholder: "John's Street"
};

var StreetField = {
  update: update$10,
  validator: validator$10,
  inputContainer: StreetField_inputContainer
};

function update$11(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: value,
            state_: init.state_,
            postcode: init.postcode,
            description: init.description
          }
        };
}

function validator_validate$11(param) {
  if (param.contact.city === "") {
    return /* Error */Block.__(1, ["City is required"]);
  } else {
    return /* Ok */Block.__(0, [/* Valid */0]);
  }
}

var validator$11 = {
  field: /* City */11,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$11
};

var CityField_inputContainer = {
  containerType: /* Text */0,
  type_: "text",
  label: "City ",
  inputId: "City",
  placeholder: "John's City"
};

var CityField = {
  update: update$11,
  validator: validator$11,
  inputContainer: CityField_inputContainer
};

function update$12(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: value,
            postcode: init.postcode,
            description: init.description
          }
        };
}

function validator_validate$12(param) {
  var match = param.contact.state_.value;
  if (match === "") {
    return /* Error */Block.__(1, ["State is required"]);
  } else {
    return /* Ok */Block.__(0, [/* Valid */0]);
  }
}

var validator$12 = {
  field: /* State */12,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$12
};

var StateField_inputContainer = {
  containerType: /* Select */4,
  type_: "text",
  label: "State ",
  inputId: "State",
  placeholder: "Search State or territory"
};

var StateField = {
  update: update$12,
  validator: validator$12,
  inputContainer: StateField_inputContainer
};

function update$13(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: value,
            description: init.description
          }
        };
}

function validator_validate$13(param) {
  if (param.contact.postcode === "") {
    return /* Error */Block.__(1, ["Postcode is required"]);
  } else {
    return /* Ok */Block.__(0, [/* Valid */0]);
  }
}

var validator$13 = {
  field: /* Postcode */13,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$13
};

var PostcodeField_inputContainer = {
  containerType: /* Text */0,
  type_: "text",
  label: "Postcode ",
  inputId: "Postcode",
  placeholder: "John's Postcode"
};

var PostcodeField = {
  update: update$13,
  validator: validator$13,
  inputContainer: PostcodeField_inputContainer
};

function update$14(state, value) {
  var init = state.contact;
  return {
          contact: {
            title: init.title,
            firstName: init.firstName,
            lastName: init.lastName,
            account: init.account,
            company: init.company,
            phone: init.phone,
            fax: init.fax,
            companyTitle: init.companyTitle,
            email: init.email,
            emailOp: init.emailOp,
            street: init.street,
            city: init.city,
            state_: init.state_,
            postcode: init.postcode,
            description: value
          }
        };
}

function validator_validate$14(param) {
  if (param.contact.description === "") {
    return /* Error */Block.__(1, ["Description is required"]);
  } else {
    return /* Ok */Block.__(0, [/* Valid */0]);
  }
}

var validator$14 = {
  field: /* Description */14,
  strategy: /* OnFirstSuccessOrFirstBlur */3,
  dependents: undefined,
  validate: validator_validate$14
};

var DescriptionField_inputContainer = {
  containerType: /* TextArea */2,
  type_: "text",
  label: "Description ",
  inputId: "Description",
  placeholder: "John's Description"
};

var DescriptionField = {
  update: update$14,
  validator: validator$14,
  inputContainer: DescriptionField_inputContainer
};

var validators_001 = /* :: */[
  validator$1,
  /* :: */[
    validator$2,
    /* :: */[
      validator$3,
      /* :: */[
        validator$4,
        /* :: */[
          validator$5,
          /* :: */[
            validator$6,
            /* :: */[
              validator$7,
              /* :: */[
                validator$8,
                /* :: */[
                  validator$9,
                  /* :: */[
                    validator$10,
                    /* :: */[
                      validator$11,
                      /* :: */[
                        validator$12,
                        /* :: */[
                          validator$13,
                          /* :: */[
                            validator$14,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var validators = /* :: */[
  validator,
  validators_001
];

export {
  TitleField ,
  FirstNameField ,
  LastNameField ,
  AccountField ,
  CompanyField ,
  PhoneField ,
  FaxField ,
  CompanyTitleField ,
  EmailField ,
  EmailOpField ,
  StreetField ,
  CityField ,
  StateField ,
  PostcodeField ,
  DescriptionField ,
  validators ,
  
}
/* regx Not a pure module */
