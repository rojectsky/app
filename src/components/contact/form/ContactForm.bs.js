// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Buttons$App from "../../base/form/input/Buttons.bs.js";
import * as StateInput$App from "./StateInput.bs.js";
import * as Formality__Form from "re-formality/src/Formality__Form.bs.js";
import * as ContactModal$App from "../modal/ContactModal.bs.js";
import * as RowContainer$App from "../../base/form/container/RowContainer.bs.js";
import * as SectionTitle$App from "../../base/form/input/SectionTitle.bs.js";
import * as FirstNameInput$App from "./FirstNameInput.bs.js";
import * as ContactFormStyle$App from "./ContactFormStyle.bs.js";
import * as ContactFormConfig$App from "./ContactFormConfig.bs.js";
import * as Formality__PublicHelpers from "re-formality/src/Formality__PublicHelpers.bs.js";
import * as SingleInputContainer$App from "../../base/form/container/SingleInputContainer.bs.js";

var ContactFormHook = Formality__Form.Make({
      validators: ContactFormConfig$App.validators
    });

function ContactForm(Props) {
  var match = React.useState((function () {
          return false;
        }));
  var setIsModalVisible = match[1];
  var isModalVisible = match[0];
  var form = Curry._2(ContactFormHook.useForm, {
        contact: {
          title: {
            label: "",
            value: ""
          },
          firstName: "",
          lastName: "",
          account: "",
          company: "",
          phone: "",
          fax: "",
          companyTitle: "",
          email: "",
          emailOp: "false",
          street: "",
          city: "",
          state_: {
            label: "",
            value: ""
          },
          postcode: "",
          description: ""
        }
      }, (function (state, form) {
          Curry._1(setIsModalVisible, (function (param) {
                  return !isModalVisible;
                }));
          return /* () */0;
        }));
  var resetForm = function (param) {
    Curry._1(form.reset, /* () */0);
    return ( setTimeout(function(){
            Array.from(document.getElementsByClassName("is-danger")).forEach((el)=> el.classList.remove("is-danger"));
            Array.from(document.getElementsByName("errormessage")).forEach((el)=> el.innerHTML = "");
           },
        0)
     );
  };
  var partial_arg = form.submit;
  return React.createElement("div", {
              className: ContactFormStyle$App.containerStyles
            }, React.createElement("form", {
                  className: "form",
                  id: "contactForm",
                  onSubmit: (function (param) {
                      return Formality__PublicHelpers.Dom.preventDefault(partial_arg, param);
                    })
                }, React.createElement("div", {
                      className: ContactFormStyle$App.submitLevelStyles
                    }, React.createElement("div", {
                          className: "level-left"
                        }, React.createElement("div", {
                              className: "level-item"
                            }, React.createElement("p", {
                                  className: ContactFormStyle$App.titleStyles
                                }, "Create Contact"))), React.createElement("div", {
                          className: "level-right"
                        }, React.createElement("div", {
                              className: "level-item"
                            }, React.createElement(Buttons$App.make, {
                                  valid: Curry._1(form.valid, /* () */0),
                                  reset: resetForm
                                })))), React.createElement(SectionTitle$App.make, {
                      title: "Contact Information"
                    }), React.createElement("div", {
                      className: "columns"
                    }, React.createElement("div", {
                          className: "column"
                        }, React.createElement(FirstNameInput$App.make, {
                              firstNamevalue: form.state.contact.firstName,
                              titleValue: form.state.contact.title,
                              onTitleChange: (function (op) {
                                  return Curry._2(form.change, /* Title */0, ContactFormConfig$App.TitleField.update(form.state, op));
                                }),
                              onFirstNameChange: (function ($$event) {
                                  return Curry._2(form.change, /* FirstName */1, ContactFormConfig$App.FirstNameField.update(form.state, $$event.target.value));
                                }),
                              onBlur: (function (param) {
                                  return Curry._1(form.blur, /* FirstName */1);
                                }),
                              titleResult: Curry._1(form.result, /* Title */0),
                              firstNameResult: Curry._1(form.result, /* FirstName */1)
                            })), React.createElement(SingleInputContainer$App.make, {
                          config: ContactFormConfig$App.LastNameField.inputContainer,
                          value: form.state.contact.lastName,
                          onBlur: (function (param) {
                              return Curry._1(form.blur, /* LastName */2);
                            }),
                          result: Curry._1(form.result, /* LastName */2),
                          onChange: (function ($$event) {
                              return Curry._2(form.change, /* LastName */2, ContactFormConfig$App.LastNameField.update(form.state, $$event.target.value));
                            })
                        })), React.createElement(RowContainer$App.make, {
                      config1: ContactFormConfig$App.AccountField.inputContainer,
                      value1: form.state.contact.account,
                      onBlur1: (function (param) {
                          return Curry._1(form.blur, /* Account */3);
                        }),
                      result1: Curry._1(form.result, /* Account */3),
                      onChange1: (function ($$event) {
                          return Curry._2(form.change, /* Account */3, ContactFormConfig$App.AccountField.update(form.state, $$event.target.value));
                        }),
                      config2: ContactFormConfig$App.CompanyField.inputContainer,
                      value2: form.state.contact.company,
                      onBlur2: (function (param) {
                          return Curry._1(form.blur, /* Company */4);
                        }),
                      result2: Curry._1(form.result, /* Company */4),
                      onChange2: (function ($$event) {
                          return Curry._2(form.change, /* Company */4, ContactFormConfig$App.CompanyField.update(form.state, $$event.target.value));
                        })
                    }), React.createElement(RowContainer$App.make, {
                      config1: ContactFormConfig$App.PhoneField.inputContainer,
                      value1: form.state.contact.phone,
                      onBlur1: (function (param) {
                          return Curry._1(form.blur, /* Phone */5);
                        }),
                      result1: Curry._1(form.result, /* Phone */5),
                      onChange1: (function ($$event) {
                          return Curry._2(form.change, /* Phone */5, ContactFormConfig$App.PhoneField.update(form.state, $$event.target.value));
                        }),
                      config2: ContactFormConfig$App.FaxField.inputContainer,
                      value2: form.state.contact.fax,
                      onBlur2: (function (param) {
                          return Curry._1(form.blur, /* Fax */6);
                        }),
                      result2: Curry._1(form.result, /* Fax */6),
                      onChange2: (function ($$event) {
                          return Curry._2(form.change, /* Fax */6, ContactFormConfig$App.FaxField.update(form.state, $$event.target.value));
                        })
                    }), React.createElement(RowContainer$App.make, {
                      config1: ContactFormConfig$App.CompanyTitleField.inputContainer,
                      value1: form.state.contact.companyTitle,
                      onBlur1: (function (param) {
                          return Curry._1(form.blur, /* CompanyTitle */7);
                        }),
                      result1: Curry._1(form.result, /* CompanyTitle */7),
                      onChange1: (function ($$event) {
                          return Curry._2(form.change, /* CompanyTitle */7, ContactFormConfig$App.CompanyTitleField.update(form.state, $$event.target.value));
                        }),
                      config2: ContactFormConfig$App.EmailField.inputContainer,
                      value2: form.state.contact.email,
                      onBlur2: (function (param) {
                          return Curry._1(form.blur, /* Email */8);
                        }),
                      result2: Curry._1(form.result, /* Email */8),
                      onChange2: (function ($$event) {
                          return Curry._2(form.change, /* Email */8, ContactFormConfig$App.EmailField.update(form.state, $$event.target.value));
                        })
                    }), React.createElement("div", {
                      className: "columns"
                    }, React.createElement(SingleInputContainer$App.make, {
                          config: ContactFormConfig$App.EmailOpField.inputContainer,
                          value: form.state.contact.emailOp,
                          onBlur: (function (param) {
                              return Curry._1(form.blur, /* EmailOp */9);
                            }),
                          result: Curry._1(form.result, /* EmailOp */9),
                          onChange: (function ($$event) {
                              return Curry._2(form.change, /* EmailOp */9, ContactFormConfig$App.EmailOpField.update(form.state, $$event.target.value));
                            }),
                          isHorizontal: true
                        }), React.createElement("div", {
                          className: "column"
                        })), React.createElement(SectionTitle$App.make, {
                      title: "Address Information"
                    }), React.createElement(RowContainer$App.make, {
                      config1: ContactFormConfig$App.StreetField.inputContainer,
                      value1: form.state.contact.street,
                      onBlur1: (function (param) {
                          return Curry._1(form.blur, /* Street */10);
                        }),
                      result1: Curry._1(form.result, /* Street */10),
                      onChange1: (function ($$event) {
                          return Curry._2(form.change, /* Street */10, ContactFormConfig$App.StreetField.update(form.state, $$event.target.value));
                        }),
                      config2: ContactFormConfig$App.CityField.inputContainer,
                      value2: form.state.contact.city,
                      onBlur2: (function (param) {
                          return Curry._1(form.blur, /* City */11);
                        }),
                      result2: Curry._1(form.result, /* City */11),
                      onChange2: (function ($$event) {
                          return Curry._2(form.change, /* City */11, ContactFormConfig$App.CityField.update(form.state, $$event.target.value));
                        })
                    }), React.createElement("div", {
                      className: "columns"
                    }, React.createElement(StateInput$App.make, {
                          config: ContactFormConfig$App.StateField.inputContainer,
                          value: form.state.contact.state_,
                          result: Curry._1(form.result, /* State */12),
                          onChange: (function (op) {
                              return Curry._2(form.change, /* State */12, ContactFormConfig$App.StateField.update(form.state, op));
                            })
                        }), React.createElement(SingleInputContainer$App.make, {
                          config: ContactFormConfig$App.PostcodeField.inputContainer,
                          value: form.state.contact.postcode,
                          onBlur: (function (param) {
                              return Curry._1(form.blur, /* Postcode */13);
                            }),
                          result: Curry._1(form.result, /* Postcode */13),
                          onChange: (function ($$event) {
                              return Curry._2(form.change, /* Postcode */13, ContactFormConfig$App.PostcodeField.update(form.state, $$event.target.value));
                            })
                        })), React.createElement(SectionTitle$App.make, {
                      title: "Description Information"
                    }), React.createElement("div", {
                      className: "columns"
                    }, React.createElement("div", {
                          className: "column"
                        }, React.createElement(SingleInputContainer$App.make, {
                              config: ContactFormConfig$App.DescriptionField.inputContainer,
                              value: form.state.contact.description,
                              onBlur: (function (param) {
                                  return Curry._1(form.blur, /* Description */14);
                                }),
                              result: Curry._1(form.result, /* Description */14),
                              onChange: (function ($$event) {
                                  return Curry._2(form.change, /* Description */14, ContactFormConfig$App.DescriptionField.update(form.state, $$event.target.value));
                                })
                            })))), isModalVisible ? React.createElement(ContactModal$App.make, {
                    contact: form.state.contact,
                    onModalClose: (function (param) {
                        return Curry._1(setIsModalVisible, (function (param) {
                                      return false;
                                    }));
                      })
                  }) : null);
}

var make = ContactForm;

var $$default = ContactForm;

export {
  ContactFormHook ,
  make ,
  $$default ,
  $$default as default,
  
}
/* ContactFormHook Not a pure module */
